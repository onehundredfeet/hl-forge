


[Internal="mirage::PointField<cinolib::vec2d>"]
interface PointField2Df {
	 void PointField2Df();
};

[Internal="mirage::CellLibrary"]
interface CellLibrary {
   void CellLibrary();

	bool load( String path );
	bool filter( String path );
	int getTagID( String tag );
};

[Internal="mirage::Noise", NoDelete]
interface Noise {
        [Static, Internal="mirage::Noise::poisson_grid"]
		void poissonGrid( [Deref] PointField2Df pf, double radius, [Deref, Cast="cinolib::vec2d *"] double2 min, [ Deref, Cast="cinolib::vec2d *"] double2 max, uint seed, int max_iterations);
};



[Internal="cinolib::Trimesh<>"]
interface Trimesh {
   void Trimesh();

	[Internal="edge_avg_length"]
   float edgeAvgLength();

};

[Internal="mirage::QuadrangulateSettings"]
interface QuadrangulateSettings {
	void QuadrangulateSettings();
	[Internal="pure_quad"]
	attribute bool pureQuad;
	[Internal="align_to_boundaries"]
	attribute bool alignToBoundaries;
	[Internal="smooth_iter"]
	attribute int smoothIter;
	attribute bool extrinsic;
};

[Internal="mirage::CellMesh<>"]
interface CellMesh {
	void CellMesh();

};
[Internal="mirage::VolumizeSettings"]
interface VolumizeSettings {
	void VolumizeSettings();
	attribute double cellHeight;
	attribute int verticalCellCount;

	void addBottomTag( uint tag, bool provides, bool requires );
	void addSideTag( uint tag, bool provides, bool requires );
	void addTopTag( uint tag, bool provides, bool requires );
	
	//std::vector<uint> bottomProvides;
    //std::vector<uint> bottomRequires;
    //std::vector<uint> topProvides;
    //std::vector<uint> topRequires;
    //std::vector<uint> sidesProvides;
    //std::vector<uint> sidesRequires;
};

[Internal="mirage::CellPolyhedraMesh"]
interface CellPolyhedraMesh {
	void CellPolyhedraMesh();

};

[Internal="mirage::Surfacing", NoDelete]
interface Surfacing {
    [Static, Internal="mirage::Surfacing::points_to_trimesh"] void pointsToTrimesh( [Deref] PointField2Df pf, [Deref] Trimesh out_mesh);
    [Static, Internal="mirage::Surfacing::quadrangulate_trimesh<>"] void quadrangulateTrimesh( [Deref] Trimesh triMeshInput, [Deref] QuadrangulateSettings settings, [Deref] CellMesh quadMesh);
	
};

[Internal="mirage::Translate", NoDelete]
interface Translate {
    [Static, Internal="mirage::Surfacing::points_to_trimesh"] 
	void pointsToTrimesh( [Deref] PointField2Df pf, [Deref] Trimesh out_mesh);
	
	[Static, Internal="mirage::Translation::cino_to_itm"]
	void polyMeshToIndexedTriMesh( [Deref] Polygonmesh pm, [Deref] IndexedTriMesh idm );

};

[Internal="cinolib::Polygonmesh<>"]
interface Polygonmesh {
	void Polygonmesh();
};

[Internal="mirage::IndexedTriMesh<>"]
interface IndexedTriMesh {
	void IndexedTriMesh();

	int vertexCount();
	int triangleCount();

	void getPositions( float *data );
	void getVertexNormals( float *data );
	void getIndices( uint *data );
};


[Internal="mirage::Cells", NoDelete]
interface Cells {
    [Static, Internal="mirage::Cells::volumize_sockets"] 
	void volumizeSockets( [Deref] CellMesh cellSockets,  [Deref] VolumizeSettings settings, [Deref] CellPolyhedraMesh outMesh);

    [Static, Internal="mirage::Cells::seedCellPossibilities"] 
	void seedCellPossibilities([Deref] CellPolyhedraMesh cellSockets, [Deref] CellLibrary lib);

	[Static, Internal="mirage::Cells::solve_cells"] 
	void solve_cells([Deref] CellPolyhedraMesh cellSockets, [Deref] CellLibrary lib);

	[Static, Internal="mirage::Cells::buildWorldMesh3D"] 
    void buildWorldMesh3D([Deref] CellPolyhedraMesh cellSockets, [Deref] CellLibrary cellLib, float cellHeight, [Deref] Polygonmesh worldMesh);


};

